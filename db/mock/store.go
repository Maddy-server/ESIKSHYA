// Code generated by MockGen. DO NOT EDIT.
// Source: Edtech_Golang/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	db "Edtech_Golang/db/sqlc"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddTimeTable mocks base method.
func (m *MockStore) AddTimeTable(arg0 context.Context, arg1 db.AddTimeTableParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTimeTable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTimeTable indicates an expected call of AddTimeTable.
func (mr *MockStoreMockRecorder) AddTimeTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTimeTable", reflect.TypeOf((*MockStore)(nil).AddTimeTable), arg0, arg1)
}

// CheckChildDetail mocks base method.
func (m *MockStore) CheckChildDetail(arg0 context.Context, arg1 int32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckChildDetail", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckChildDetail indicates an expected call of CheckChildDetail.
func (mr *MockStoreMockRecorder) CheckChildDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckChildDetail", reflect.TypeOf((*MockStore)(nil).CheckChildDetail), arg0, arg1)
}

// CheckUsernameAvailability mocks base method.
func (m *MockStore) CheckUsernameAvailability(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUsernameAvailability", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUsernameAvailability indicates an expected call of CheckUsernameAvailability.
func (mr *MockStoreMockRecorder) CheckUsernameAvailability(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUsernameAvailability", reflect.TypeOf((*MockStore)(nil).CheckUsernameAvailability), arg0, arg1)
}

// CreateChild mocks base method.
func (m *MockStore) CreateChild(arg0 context.Context, arg1 db.CreateChildParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChild", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChild indicates an expected call of CreateChild.
func (mr *MockStoreMockRecorder) CreateChild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChild", reflect.TypeOf((*MockStore)(nil).CreateChild), arg0, arg1)
}

// CreateParent mocks base method.
func (m *MockStore) CreateParent(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateParent indicates an expected call of CreateParent.
func (mr *MockStoreMockRecorder) CreateParent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParent", reflect.TypeOf((*MockStore)(nil).CreateParent), arg0, arg1)
}

// CreateParentDetail mocks base method.
func (m *MockStore) CreateParentDetail(arg0 context.Context, arg1 db.CreateParentDetailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParentDetail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateParentDetail indicates an expected call of CreateParentDetail.
func (mr *MockStoreMockRecorder) CreateParentDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParentDetail", reflect.TypeOf((*MockStore)(nil).CreateParentDetail), arg0, arg1)
}

// EditParentDetail mocks base method.
func (m *MockStore) EditParentDetail(arg0 context.Context, arg1 db.EditParentDetailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditParentDetail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditParentDetail indicates an expected call of EditParentDetail.
func (mr *MockStoreMockRecorder) EditParentDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditParentDetail", reflect.TypeOf((*MockStore)(nil).EditParentDetail), arg0, arg1)
}

// GetChild mocks base method.
func (m *MockStore) GetChild(arg0 context.Context, arg1 string) (db.Child, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChild", arg0, arg1)
	ret0, _ := ret[0].(db.Child)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChild indicates an expected call of GetChild.
func (mr *MockStoreMockRecorder) GetChild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChild", reflect.TypeOf((*MockStore)(nil).GetChild), arg0, arg1)
}

// GetParent mocks base method.
func (m *MockStore) GetParent(arg0 context.Context, arg1 string) (db.Parent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParent", arg0, arg1)
	ret0, _ := ret[0].(db.Parent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParent indicates an expected call of GetParent.
func (mr *MockStoreMockRecorder) GetParent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParent", reflect.TypeOf((*MockStore)(nil).GetParent), arg0, arg1)
}

// GetParentDetail mocks base method.
func (m *MockStore) GetParentDetail(arg0 context.Context, arg1 int32) (db.ParentsDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentDetail", arg0, arg1)
	ret0, _ := ret[0].(db.ParentsDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParentDetail indicates an expected call of GetParentDetail.
func (mr *MockStoreMockRecorder) GetParentDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentDetail", reflect.TypeOf((*MockStore)(nil).GetParentDetail), arg0, arg1)
}

// GetParentForLogin mocks base method.
func (m *MockStore) GetParentForLogin(arg0 context.Context, arg1 string) (db.GetParentForLoginRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentForLogin", arg0, arg1)
	ret0, _ := ret[0].(db.GetParentForLoginRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParentForLogin indicates an expected call of GetParentForLogin.
func (mr *MockStoreMockRecorder) GetParentForLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentForLogin", reflect.TypeOf((*MockStore)(nil).GetParentForLogin), arg0, arg1)
}

// GetTimeTable mocks base method.
func (m *MockStore) GetTimeTable(arg0 context.Context, arg1 int32) ([]db.TimeTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeTable", arg0, arg1)
	ret0, _ := ret[0].([]db.TimeTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeTable indicates an expected call of GetTimeTable.
func (mr *MockStoreMockRecorder) GetTimeTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeTable", reflect.TypeOf((*MockStore)(nil).GetTimeTable), arg0, arg1)
}

// RemoveOTP mocks base method.
func (m *MockStore) RemoveOTP(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOTP", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOTP indicates an expected call of RemoveOTP.
func (mr *MockStoreMockRecorder) RemoveOTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOTP", reflect.TypeOf((*MockStore)(nil).RemoveOTP), arg0, arg1)
}

// RemoveTimeTableAll mocks base method.
func (m *MockStore) RemoveTimeTableAll(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTimeTableAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTimeTableAll indicates an expected call of RemoveTimeTableAll.
func (mr *MockStoreMockRecorder) RemoveTimeTableAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTimeTableAll", reflect.TypeOf((*MockStore)(nil).RemoveTimeTableAll), arg0, arg1)
}

// RemoveTimeTableByDescription mocks base method.
func (m *MockStore) RemoveTimeTableByDescription(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTimeTableByDescription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTimeTableByDescription indicates an expected call of RemoveTimeTableByDescription.
func (mr *MockStoreMockRecorder) RemoveTimeTableByDescription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTimeTableByDescription", reflect.TypeOf((*MockStore)(nil).RemoveTimeTableByDescription), arg0, arg1)
}

// SaveOTP mocks base method.
func (m *MockStore) SaveOTP(arg0 context.Context, arg1 db.SaveOTPParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOTP", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOTP indicates an expected call of SaveOTP.
func (mr *MockStoreMockRecorder) SaveOTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOTP", reflect.TypeOf((*MockStore)(nil).SaveOTP), arg0, arg1)
}

// Savepassword mocks base method.
func (m *MockStore) Savepassword(arg0 context.Context, arg1 db.SavepasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Savepassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Savepassword indicates an expected call of Savepassword.
func (mr *MockStoreMockRecorder) Savepassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Savepassword", reflect.TypeOf((*MockStore)(nil).Savepassword), arg0, arg1)
}

// SetVerification mocks base method.
func (m *MockStore) SetVerification(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVerification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVerification indicates an expected call of SetVerification.
func (mr *MockStoreMockRecorder) SetVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVerification", reflect.TypeOf((*MockStore)(nil).SetVerification), arg0, arg1)
}

// SetVerificationChild mocks base method.
func (m *MockStore) SetVerificationChild(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVerificationChild", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVerificationChild indicates an expected call of SetVerificationChild.
func (mr *MockStoreMockRecorder) SetVerificationChild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVerificationChild", reflect.TypeOf((*MockStore)(nil).SetVerificationChild), arg0, arg1)
}
