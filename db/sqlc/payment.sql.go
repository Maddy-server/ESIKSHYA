// Code generated by sqlc. DO NOT EDIT.
// source: payment.sql

package db

import (
	"context"
	"database/sql"
)

const createPayment = `-- name: CreatePayment :exec
INSERT INTO payment(
    transaction_id,transaction_token,method,parent_id,child_id,amount,pay_at,expire_at
) VALUES (
    ?,?,?,?,?,?,?,?
)
`

type CreatePaymentParams struct {
	TransactionID    string       `json:"transaction_id"`
	TransactionToken string       `json:"transaction_token"`
	Method           string       `json:"method"`
	ParentID         int32        `json:"parent_id"`
	ChildID          int32        `json:"child_id"`
	Amount           int32        `json:"amount"`
	PayAt            sql.NullTime `json:"pay_at"`
	ExpireAt         sql.NullTime `json:"expire_at"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) error {
	_, err := q.exec(ctx, q.createPaymentStmt, createPayment,
		arg.TransactionID,
		arg.TransactionToken,
		arg.Method,
		arg.ParentID,
		arg.ChildID,
		arg.Amount,
		arg.PayAt,
		arg.ExpireAt,
	)
	return err
}

const getPayment = `-- name: GetPayment :one
SELECT id, transaction_id, transaction_token, method, parent_id, child_id, amount, pay_at, expire_at from payment WHERE child_id=? AND expire_at >= ?
`

type GetPaymentParams struct {
	ChildID  int32        `json:"child_id"`
	ExpireAt sql.NullTime `json:"expire_at"`
}

func (q *Queries) GetPayment(ctx context.Context, arg GetPaymentParams) (Payment, error) {
	row := q.queryRow(ctx, q.getPaymentStmt, getPayment, arg.ChildID, arg.ExpireAt)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.TransactionToken,
		&i.Method,
		&i.ParentID,
		&i.ChildID,
		&i.Amount,
		&i.PayAt,
		&i.ExpireAt,
	)
	return i, err
}

const getPaymentList = `-- name: GetPaymentList :many
SELECT id, transaction_id, transaction_token, method, parent_id, child_id, amount, pay_at, expire_at from payment WHERE parent_id=? AND expire_at >= ?
`

type GetPaymentListParams struct {
	ParentID int32        `json:"parent_id"`
	ExpireAt sql.NullTime `json:"expire_at"`
}

func (q *Queries) GetPaymentList(ctx context.Context, arg GetPaymentListParams) ([]Payment, error) {
	rows, err := q.query(ctx, q.getPaymentListStmt, getPaymentList, arg.ParentID, arg.ExpireAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.TransactionID,
			&i.TransactionToken,
			&i.Method,
			&i.ParentID,
			&i.ChildID,
			&i.Amount,
			&i.PayAt,
			&i.ExpireAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
