// Code generated by sqlc. DO NOT EDIT.
// source: friends_lobby_questions.sql

package db

import (
	"context"
)

const createFriendsLobbyQuestions = `-- name: CreateFriendsLobbyQuestions :exec
INSERT INTO friends_lobby_questions(
   lobby_id, questions,options_a,options_b,options_c,options_d,correct_options
) VALUES (
    ?,?,?,?,?,?,?
)
`

type CreateFriendsLobbyQuestionsParams struct {
	LobbyID        int32  `json:"lobby_id"`
	Questions      string `json:"questions"`
	OptionsA       string `json:"options_a"`
	OptionsB       string `json:"options_b"`
	OptionsC       string `json:"options_c"`
	OptionsD       string `json:"options_d"`
	CorrectOptions string `json:"correct_options"`
}

func (q *Queries) CreateFriendsLobbyQuestions(ctx context.Context, arg CreateFriendsLobbyQuestionsParams) error {
	_, err := q.exec(ctx, q.createFriendsLobbyQuestionsStmt, createFriendsLobbyQuestions,
		arg.LobbyID,
		arg.Questions,
		arg.OptionsA,
		arg.OptionsB,
		arg.OptionsC,
		arg.OptionsD,
		arg.CorrectOptions,
	)
	return err
}

const getFriendsLobbyQuestions = `-- name: GetFriendsLobbyQuestions :many
SELECT id, lobby_id, questions, options_a, options_b, options_c, options_d, correct_options FROM friends_lobby_questions WHERE lobby_id = ?
`

func (q *Queries) GetFriendsLobbyQuestions(ctx context.Context, lobbyID int32) ([]FriendsLobbyQuestion, error) {
	rows, err := q.query(ctx, q.getFriendsLobbyQuestionsStmt, getFriendsLobbyQuestions, lobbyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FriendsLobbyQuestion
	for rows.Next() {
		var i FriendsLobbyQuestion
		if err := rows.Scan(
			&i.ID,
			&i.LobbyID,
			&i.Questions,
			&i.OptionsA,
			&i.OptionsB,
			&i.OptionsC,
			&i.OptionsD,
			&i.CorrectOptions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
