// Code generated by sqlc. DO NOT EDIT.
// source: child_token.sql

package db

import (
	"context"
)

const createChildToken = `-- name: CreateChildToken :exec
INSERT INTO child_token(
    user_id, token
) VALUES (
    ?,?
)
`

type CreateChildTokenParams struct {
	UserID int32  `json:"user_id"`
	Token  string `json:"token"`
}

func (q *Queries) CreateChildToken(ctx context.Context, arg CreateChildTokenParams) error {
	_, err := q.exec(ctx, q.createChildTokenStmt, createChildToken, arg.UserID, arg.Token)
	return err
}

const getChildToken = `-- name: GetChildToken :one
SELECT id, user_id, token FROM child_token WHERE user_id=?
`

func (q *Queries) GetChildToken(ctx context.Context, userID int32) (ChildToken, error) {
	row := q.queryRow(ctx, q.getChildTokenStmt, getChildToken, userID)
	var i ChildToken
	err := row.Scan(&i.ID, &i.UserID, &i.Token)
	return i, err
}

const updateChildToken = `-- name: UpdateChildToken :exec
UPDATE child_token SET token=? WHERE user_id=?
`

type UpdateChildTokenParams struct {
	Token  string `json:"token"`
	UserID int32  `json:"user_id"`
}

func (q *Queries) UpdateChildToken(ctx context.Context, arg UpdateChildTokenParams) error {
	_, err := q.exec(ctx, q.updateChildTokenStmt, updateChildToken, arg.Token, arg.UserID)
	return err
}
