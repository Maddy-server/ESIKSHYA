// Code generated by sqlc. DO NOT EDIT.
// source: game_queue.sql

package db

import (
	"context"
	"time"
)

const createQueue = `-- name: CreateQueue :exec
INSERT INTO game_queue(
    user_id, status,grade,created_at,subject,lobby_id
) VALUES (
    ?,?,?,?,?,?
)
`

type CreateQueueParams struct {
	UserID    int32     `json:"user_id"`
	Status    string    `json:"status"`
	Grade     int32     `json:"grade"`
	CreatedAt time.Time `json:"created_at"`
	Subject   string    `json:"subject"`
	LobbyID   int32     `json:"lobby_id"`
}

func (q *Queries) CreateQueue(ctx context.Context, arg CreateQueueParams) error {
	_, err := q.exec(ctx, q.createQueueStmt, createQueue,
		arg.UserID,
		arg.Status,
		arg.Grade,
		arg.CreatedAt,
		arg.Subject,
		arg.LobbyID,
	)
	return err
}

const getOwnQueueInfo = `-- name: GetOwnQueueInfo :one
SELECT id, user_id, status, subject, grade, lobby_id, created_at FROM game_queue WHERE user_id = ?
`

func (q *Queries) GetOwnQueueInfo(ctx context.Context, userID int32) (GameQueue, error) {
	row := q.queryRow(ctx, q.getOwnQueueInfoStmt, getOwnQueueInfo, userID)
	var i GameQueue
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Subject,
		&i.Grade,
		&i.LobbyID,
		&i.CreatedAt,
	)
	return i, err
}

const getQueue = `-- name: GetQueue :one
SELECT id, user_id, status, subject, grade, lobby_id, created_at FROM game_queue WHERE status=? AND subject=? AND grade=? AND user_id != ?  ORDER BY RAND() Limit 1
`

type GetQueueParams struct {
	Status  string `json:"status"`
	Subject string `json:"subject"`
	Grade   int32  `json:"grade"`
	UserID  int32  `json:"user_id"`
}

func (q *Queries) GetQueue(ctx context.Context, arg GetQueueParams) (GameQueue, error) {
	row := q.queryRow(ctx, q.getQueueStmt, getQueue,
		arg.Status,
		arg.Subject,
		arg.Grade,
		arg.UserID,
	)
	var i GameQueue
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Subject,
		&i.Grade,
		&i.LobbyID,
		&i.CreatedAt,
	)
	return i, err
}

const removeQueue = `-- name: RemoveQueue :exec
DELETE FROM game_queue WHERE user_id=?
`

func (q *Queries) RemoveQueue(ctx context.Context, userID int32) error {
	_, err := q.exec(ctx, q.removeQueueStmt, removeQueue, userID)
	return err
}

const updateQueue = `-- name: UpdateQueue :exec
UPDATE game_queue SET status=? WHERE user_id=?
`

type UpdateQueueParams struct {
	Status string `json:"status"`
	UserID int32  `json:"user_id"`
}

func (q *Queries) UpdateQueue(ctx context.Context, arg UpdateQueueParams) error {
	_, err := q.exec(ctx, q.updateQueueStmt, updateQueue, arg.Status, arg.UserID)
	return err
}

const updateQueueLobby = `-- name: UpdateQueueLobby :exec
UPDATE game_queue SET lobby_id=? WHERE user_id=?
`

type UpdateQueueLobbyParams struct {
	LobbyID int32 `json:"lobby_id"`
	UserID  int32 `json:"user_id"`
}

func (q *Queries) UpdateQueueLobby(ctx context.Context, arg UpdateQueueLobbyParams) error {
	_, err := q.exec(ctx, q.updateQueueLobbyStmt, updateQueueLobby, arg.LobbyID, arg.UserID)
	return err
}
