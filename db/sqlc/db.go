// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.acceptFriendRequestStmt, err = db.PrepareContext(ctx, acceptFriendRequest); err != nil {
		return nil, fmt.Errorf("error preparing query AcceptFriendRequest: %w", err)
	}
	if q.addBookStmt, err = db.PrepareContext(ctx, addBook); err != nil {
		return nil, fmt.Errorf("error preparing query AddBook: %w", err)
	}
	if q.addCountStmt, err = db.PrepareContext(ctx, addCount); err != nil {
		return nil, fmt.Errorf("error preparing query AddCount: %w", err)
	}
	if q.addTimeTableStmt, err = db.PrepareContext(ctx, addTimeTable); err != nil {
		return nil, fmt.Errorf("error preparing query AddTimeTable: %w", err)
	}
	if q.checkChildDetailStmt, err = db.PrepareContext(ctx, checkChildDetail); err != nil {
		return nil, fmt.Errorf("error preparing query CheckChildDetail: %w", err)
	}
	if q.checkFriendsListStmt, err = db.PrepareContext(ctx, checkFriendsList); err != nil {
		return nil, fmt.Errorf("error preparing query CheckFriendsList: %w", err)
	}
	if q.checkUsernameAvailabilityStmt, err = db.PrepareContext(ctx, checkUsernameAvailability); err != nil {
		return nil, fmt.Errorf("error preparing query CheckUsernameAvailability: %w", err)
	}
	if q.compairKeyStmt, err = db.PrepareContext(ctx, compairKey); err != nil {
		return nil, fmt.Errorf("error preparing query CompairKey: %w", err)
	}
	if q.createBookHistoryStmt, err = db.PrepareContext(ctx, createBookHistory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBookHistory: %w", err)
	}
	if q.createChildStmt, err = db.PrepareContext(ctx, createChild); err != nil {
		return nil, fmt.Errorf("error preparing query CreateChild: %w", err)
	}
	if q.createChildDetailStmt, err = db.PrepareContext(ctx, createChildDetail); err != nil {
		return nil, fmt.Errorf("error preparing query CreateChildDetail: %w", err)
	}
	if q.createChildNotificationStmt, err = db.PrepareContext(ctx, createChildNotification); err != nil {
		return nil, fmt.Errorf("error preparing query CreateChildNotification: %w", err)
	}
	if q.createChildTokenStmt, err = db.PrepareContext(ctx, createChildToken); err != nil {
		return nil, fmt.Errorf("error preparing query CreateChildToken: %w", err)
	}
	if q.createFriendsLobbyQuestionsStmt, err = db.PrepareContext(ctx, createFriendsLobbyQuestions); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFriendsLobbyQuestions: %w", err)
	}
	if q.createGameFriendLobbyStmt, err = db.PrepareContext(ctx, createGameFriendLobby); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGameFriendLobby: %w", err)
	}
	if q.createGameNotificationStmt, err = db.PrepareContext(ctx, createGameNotification); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGameNotification: %w", err)
	}
	if q.createGameRandomLobbyStmt, err = db.PrepareContext(ctx, createGameRandomLobby); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGameRandomLobby: %w", err)
	}
	if q.createGeneralVideoStmt, err = db.PrepareContext(ctx, createGeneralVideo); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGeneralVideo: %w", err)
	}
	if q.createParentStmt, err = db.PrepareContext(ctx, createParent); err != nil {
		return nil, fmt.Errorf("error preparing query CreateParent: %w", err)
	}
	if q.createParentDetailStmt, err = db.PrepareContext(ctx, createParentDetail); err != nil {
		return nil, fmt.Errorf("error preparing query CreateParentDetail: %w", err)
	}
	if q.createParentsNotificationStmt, err = db.PrepareContext(ctx, createParentsNotification); err != nil {
		return nil, fmt.Errorf("error preparing query CreateParentsNotification: %w", err)
	}
	if q.createParentsTokenStmt, err = db.PrepareContext(ctx, createParentsToken); err != nil {
		return nil, fmt.Errorf("error preparing query CreateParentsToken: %w", err)
	}
	if q.createPaymentStmt, err = db.PrepareContext(ctx, createPayment); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePayment: %w", err)
	}
	if q.createPaymentNumberStmt, err = db.PrepareContext(ctx, createPaymentNumber); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePaymentNumber: %w", err)
	}
	if q.createQuestionsStmt, err = db.PrepareContext(ctx, createQuestions); err != nil {
		return nil, fmt.Errorf("error preparing query CreateQuestions: %w", err)
	}
	if q.createQueueStmt, err = db.PrepareContext(ctx, createQueue); err != nil {
		return nil, fmt.Errorf("error preparing query CreateQueue: %w", err)
	}
	if q.createRandomLobbyQuestionsStmt, err = db.PrepareContext(ctx, createRandomLobbyQuestions); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRandomLobbyQuestions: %w", err)
	}
	if q.createSaveBookStmt, err = db.PrepareContext(ctx, createSaveBook); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSaveBook: %w", err)
	}
	if q.createScoreStmt, err = db.PrepareContext(ctx, createScore); err != nil {
		return nil, fmt.Errorf("error preparing query CreateScore: %w", err)
	}
	if q.createVideoStmt, err = db.PrepareContext(ctx, createVideo); err != nil {
		return nil, fmt.Errorf("error preparing query CreateVideo: %w", err)
	}
	if q.deleteChildNotificationStmt, err = db.PrepareContext(ctx, deleteChildNotification); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteChildNotification: %w", err)
	}
	if q.deleteGameFriendLobbyStmt, err = db.PrepareContext(ctx, deleteGameFriendLobby); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGameFriendLobby: %w", err)
	}
	if q.deleteGameNotificationStmt, err = db.PrepareContext(ctx, deleteGameNotification); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGameNotification: %w", err)
	}
	if q.deleteGameRandomLobbyStmt, err = db.PrepareContext(ctx, deleteGameRandomLobby); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGameRandomLobby: %w", err)
	}
	if q.editChildDetailStmt, err = db.PrepareContext(ctx, editChildDetail); err != nil {
		return nil, fmt.Errorf("error preparing query EditChildDetail: %w", err)
	}
	if q.editParentDetailStmt, err = db.PrepareContext(ctx, editParentDetail); err != nil {
		return nil, fmt.Errorf("error preparing query EditParentDetail: %w", err)
	}
	if q.fetchBookAfterCreatedStmt, err = db.PrepareContext(ctx, fetchBookAfterCreated); err != nil {
		return nil, fmt.Errorf("error preparing query FetchBookAfterCreated: %w", err)
	}
	if q.fetchBookByIdStmt, err = db.PrepareContext(ctx, fetchBookById); err != nil {
		return nil, fmt.Errorf("error preparing query FetchBookById: %w", err)
	}
	if q.fetchBookContentStmt, err = db.PrepareContext(ctx, fetchBookContent); err != nil {
		return nil, fmt.Errorf("error preparing query FetchBookContent: %w", err)
	}
	if q.fetchBookCountStmt, err = db.PrepareContext(ctx, fetchBookCount); err != nil {
		return nil, fmt.Errorf("error preparing query FetchBookCount: %w", err)
	}
	if q.fetchBookDetailsByIdStmt, err = db.PrepareContext(ctx, fetchBookDetailsById); err != nil {
		return nil, fmt.Errorf("error preparing query FetchBookDetailsById: %w", err)
	}
	if q.fetchBookHistoryStmt, err = db.PrepareContext(ctx, fetchBookHistory); err != nil {
		return nil, fmt.Errorf("error preparing query FetchBookHistory: %w", err)
	}
	if q.fetchBookHistoryListStmt, err = db.PrepareContext(ctx, fetchBookHistoryList); err != nil {
		return nil, fmt.Errorf("error preparing query FetchBookHistoryList: %w", err)
	}
	if q.fetchBookListBySectionStmt, err = db.PrepareContext(ctx, fetchBookListBySection); err != nil {
		return nil, fmt.Errorf("error preparing query FetchBookListBySection: %w", err)
	}
	if q.fetchBookListHomeStmt, err = db.PrepareContext(ctx, fetchBookListHome); err != nil {
		return nil, fmt.Errorf("error preparing query FetchBookListHome: %w", err)
	}
	if q.fetchNewBookStmt, err = db.PrepareContext(ctx, fetchNewBook); err != nil {
		return nil, fmt.Errorf("error preparing query FetchNewBook: %w", err)
	}
	if q.fetchPopularBookStmt, err = db.PrepareContext(ctx, fetchPopularBook); err != nil {
		return nil, fmt.Errorf("error preparing query FetchPopularBook: %w", err)
	}
	if q.fetchPopularBookListBySectionStmt, err = db.PrepareContext(ctx, fetchPopularBookListBySection); err != nil {
		return nil, fmt.Errorf("error preparing query FetchPopularBookListBySection: %w", err)
	}
	if q.fetchSavedBookStmt, err = db.PrepareContext(ctx, fetchSavedBook); err != nil {
		return nil, fmt.Errorf("error preparing query FetchSavedBook: %w", err)
	}
	if q.fetchSavedBookListStmt, err = db.PrepareContext(ctx, fetchSavedBookList); err != nil {
		return nil, fmt.Errorf("error preparing query FetchSavedBookList: %w", err)
	}
	if q.getChildStmt, err = db.PrepareContext(ctx, getChild); err != nil {
		return nil, fmt.Errorf("error preparing query GetChild: %w", err)
	}
	if q.getChildDetailStmt, err = db.PrepareContext(ctx, getChildDetail); err != nil {
		return nil, fmt.Errorf("error preparing query GetChildDetail: %w", err)
	}
	if q.getChildDetailListOnCountryStmt, err = db.PrepareContext(ctx, getChildDetailListOnCountry); err != nil {
		return nil, fmt.Errorf("error preparing query GetChildDetailListOnCountry: %w", err)
	}
	if q.getChildDetailListOnStateStmt, err = db.PrepareContext(ctx, getChildDetailListOnState); err != nil {
		return nil, fmt.Errorf("error preparing query GetChildDetailListOnState: %w", err)
	}
	if q.getChildForVerifyStmt, err = db.PrepareContext(ctx, getChildForVerify); err != nil {
		return nil, fmt.Errorf("error preparing query GetChildForVerify: %w", err)
	}
	if q.getChildNotificationStmt, err = db.PrepareContext(ctx, getChildNotification); err != nil {
		return nil, fmt.Errorf("error preparing query GetChildNotification: %w", err)
	}
	if q.getChildTokenStmt, err = db.PrepareContext(ctx, getChildToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetChildToken: %w", err)
	}
	if q.getChildrenDetailsStmt, err = db.PrepareContext(ctx, getChildrenDetails); err != nil {
		return nil, fmt.Errorf("error preparing query GetChildrenDetails: %w", err)
	}
	if q.getClassVideoStmt, err = db.PrepareContext(ctx, getClassVideo); err != nil {
		return nil, fmt.Errorf("error preparing query GetClassVideo: %w", err)
	}
	if q.getClassVideoFreeStmt, err = db.PrepareContext(ctx, getClassVideoFree); err != nil {
		return nil, fmt.Errorf("error preparing query GetClassVideoFree: %w", err)
	}
	if q.getFakeGameRandomLobbyByClassStmt, err = db.PrepareContext(ctx, getFakeGameRandomLobbyByClass); err != nil {
		return nil, fmt.Errorf("error preparing query GetFakeGameRandomLobbyByClass: %w", err)
	}
	if q.getFriendStmt, err = db.PrepareContext(ctx, getFriend); err != nil {
		return nil, fmt.Errorf("error preparing query GetFriend: %w", err)
	}
	if q.getFriendsListStmt, err = db.PrepareContext(ctx, getFriendsList); err != nil {
		return nil, fmt.Errorf("error preparing query GetFriendsList: %w", err)
	}
	if q.getFriendsLobbyQuestionsStmt, err = db.PrepareContext(ctx, getFriendsLobbyQuestions); err != nil {
		return nil, fmt.Errorf("error preparing query GetFriendsLobbyQuestions: %w", err)
	}
	if q.getGameFriendLobbyStmt, err = db.PrepareContext(ctx, getGameFriendLobby); err != nil {
		return nil, fmt.Errorf("error preparing query GetGameFriendLobby: %w", err)
	}
	if q.getGameNotificationStmt, err = db.PrepareContext(ctx, getGameNotification); err != nil {
		return nil, fmt.Errorf("error preparing query GetGameNotification: %w", err)
	}
	if q.getGameRandomLobbyStmt, err = db.PrepareContext(ctx, getGameRandomLobby); err != nil {
		return nil, fmt.Errorf("error preparing query GetGameRandomLobby: %w", err)
	}
	if q.getGameRandomLobbyByIdStmt, err = db.PrepareContext(ctx, getGameRandomLobbyById); err != nil {
		return nil, fmt.Errorf("error preparing query GetGameRandomLobbyById: %w", err)
	}
	if q.getGeneralVideoStmt, err = db.PrepareContext(ctx, getGeneralVideo); err != nil {
		return nil, fmt.Errorf("error preparing query GetGeneralVideo: %w", err)
	}
	if q.getListGeneralVideoStmt, err = db.PrepareContext(ctx, getListGeneralVideo); err != nil {
		return nil, fmt.Errorf("error preparing query GetListGeneralVideo: %w", err)
	}
	if q.getOwnQueueInfoStmt, err = db.PrepareContext(ctx, getOwnQueueInfo); err != nil {
		return nil, fmt.Errorf("error preparing query GetOwnQueueInfo: %w", err)
	}
	if q.getParentStmt, err = db.PrepareContext(ctx, getParent); err != nil {
		return nil, fmt.Errorf("error preparing query GetParent: %w", err)
	}
	if q.getParentByRandomKeyStmt, err = db.PrepareContext(ctx, getParentByRandomKey); err != nil {
		return nil, fmt.Errorf("error preparing query GetParentByRandomKey: %w", err)
	}
	if q.getParentDetailStmt, err = db.PrepareContext(ctx, getParentDetail); err != nil {
		return nil, fmt.Errorf("error preparing query GetParentDetail: %w", err)
	}
	if q.getParentForLoginStmt, err = db.PrepareContext(ctx, getParentForLogin); err != nil {
		return nil, fmt.Errorf("error preparing query GetParentForLogin: %w", err)
	}
	if q.getParentIdStmt, err = db.PrepareContext(ctx, getParentId); err != nil {
		return nil, fmt.Errorf("error preparing query GetParentId: %w", err)
	}
	if q.getParentInfoStmt, err = db.PrepareContext(ctx, getParentInfo); err != nil {
		return nil, fmt.Errorf("error preparing query GetParentInfo: %w", err)
	}
	if q.getParentsNotificationStmt, err = db.PrepareContext(ctx, getParentsNotification); err != nil {
		return nil, fmt.Errorf("error preparing query GetParentsNotification: %w", err)
	}
	if q.getParentsTokenStmt, err = db.PrepareContext(ctx, getParentsToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetParentsToken: %w", err)
	}
	if q.getPaymentStmt, err = db.PrepareContext(ctx, getPayment); err != nil {
		return nil, fmt.Errorf("error preparing query GetPayment: %w", err)
	}
	if q.getPaymentListStmt, err = db.PrepareContext(ctx, getPaymentList); err != nil {
		return nil, fmt.Errorf("error preparing query GetPaymentList: %w", err)
	}
	if q.getPaymentNumberInfoStmt, err = db.PrepareContext(ctx, getPaymentNumberInfo); err != nil {
		return nil, fmt.Errorf("error preparing query GetPaymentNumberInfo: %w", err)
	}
	if q.getQuestionsStmt, err = db.PrepareContext(ctx, getQuestions); err != nil {
		return nil, fmt.Errorf("error preparing query GetQuestions: %w", err)
	}
	if q.getQueueStmt, err = db.PrepareContext(ctx, getQueue); err != nil {
		return nil, fmt.Errorf("error preparing query GetQueue: %w", err)
	}
	if q.getRandomLobbyQuestionsStmt, err = db.PrepareContext(ctx, getRandomLobbyQuestions); err != nil {
		return nil, fmt.Errorf("error preparing query GetRandomLobbyQuestions: %w", err)
	}
	if q.getScoreStmt, err = db.PrepareContext(ctx, getScore); err != nil {
		return nil, fmt.Errorf("error preparing query GetScore: %w", err)
	}
	if q.getScoreListStmt, err = db.PrepareContext(ctx, getScoreList); err != nil {
		return nil, fmt.Errorf("error preparing query GetScoreList: %w", err)
	}
	if q.getSubjectVideoStmt, err = db.PrepareContext(ctx, getSubjectVideo); err != nil {
		return nil, fmt.Errorf("error preparing query GetSubjectVideo: %w", err)
	}
	if q.getSubjectVideoFreeStmt, err = db.PrepareContext(ctx, getSubjectVideoFree); err != nil {
		return nil, fmt.Errorf("error preparing query GetSubjectVideoFree: %w", err)
	}
	if q.getTimeTableStmt, err = db.PrepareContext(ctx, getTimeTable); err != nil {
		return nil, fmt.Errorf("error preparing query GetTimeTable: %w", err)
	}
	if q.getVideoStmt, err = db.PrepareContext(ctx, getVideo); err != nil {
		return nil, fmt.Errorf("error preparing query GetVideo: %w", err)
	}
	if q.rejectFriendRequestStmt, err = db.PrepareContext(ctx, rejectFriendRequest); err != nil {
		return nil, fmt.Errorf("error preparing query RejectFriendRequest: %w", err)
	}
	if q.removeChildTokenStmt, err = db.PrepareContext(ctx, removeChildToken); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveChildToken: %w", err)
	}
	if q.removeOTPStmt, err = db.PrepareContext(ctx, removeOTP); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveOTP: %w", err)
	}
	if q.removeParentsTokenStmt, err = db.PrepareContext(ctx, removeParentsToken); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveParentsToken: %w", err)
	}
	if q.removeQueueStmt, err = db.PrepareContext(ctx, removeQueue); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveQueue: %w", err)
	}
	if q.removeTimeTableAllStmt, err = db.PrepareContext(ctx, removeTimeTableAll); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveTimeTableAll: %w", err)
	}
	if q.removeTimeTableByDescriptionStmt, err = db.PrepareContext(ctx, removeTimeTableByDescription); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveTimeTableByDescription: %w", err)
	}
	if q.removedSavedBookStmt, err = db.PrepareContext(ctx, removedSavedBook); err != nil {
		return nil, fmt.Errorf("error preparing query RemovedSavedBook: %w", err)
	}
	if q.saveOTPStmt, err = db.PrepareContext(ctx, saveOTP); err != nil {
		return nil, fmt.Errorf("error preparing query SaveOTP: %w", err)
	}
	if q.savepasswordStmt, err = db.PrepareContext(ctx, savepassword); err != nil {
		return nil, fmt.Errorf("error preparing query Savepassword: %w", err)
	}
	if q.sendFriendRequestStmt, err = db.PrepareContext(ctx, sendFriendRequest); err != nil {
		return nil, fmt.Errorf("error preparing query SendFriendRequest: %w", err)
	}
	if q.setVerificationStmt, err = db.PrepareContext(ctx, setVerification); err != nil {
		return nil, fmt.Errorf("error preparing query SetVerification: %w", err)
	}
	if q.setVerificationChildStmt, err = db.PrepareContext(ctx, setVerificationChild); err != nil {
		return nil, fmt.Errorf("error preparing query SetVerificationChild: %w", err)
	}
	if q.updateBookStmt, err = db.PrepareContext(ctx, updateBook); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBook: %w", err)
	}
	if q.updateBookCountStmt, err = db.PrepareContext(ctx, updateBookCount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBookCount: %w", err)
	}
	if q.updateBookHistoryStmt, err = db.PrepareContext(ctx, updateBookHistory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBookHistory: %w", err)
	}
	if q.updateChildTokenStmt, err = db.PrepareContext(ctx, updateChildToken); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateChildToken: %w", err)
	}
	if q.updateGameFriendLobbyStmt, err = db.PrepareContext(ctx, updateGameFriendLobby); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGameFriendLobby: %w", err)
	}
	if q.updateGameRandomLobbyStmt, err = db.PrepareContext(ctx, updateGameRandomLobby); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGameRandomLobby: %w", err)
	}
	if q.updateParentsTokenStmt, err = db.PrepareContext(ctx, updateParentsToken); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateParentsToken: %w", err)
	}
	if q.updateQueueStmt, err = db.PrepareContext(ctx, updateQueue); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateQueue: %w", err)
	}
	if q.updateQueueLobbyStmt, err = db.PrepareContext(ctx, updateQueueLobby); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateQueueLobby: %w", err)
	}
	if q.updateScorePlayerOneStmt, err = db.PrepareContext(ctx, updateScorePlayerOne); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateScorePlayerOne: %w", err)
	}
	if q.updateScorePlayerTwoStmt, err = db.PrepareContext(ctx, updateScorePlayerTwo); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateScorePlayerTwo: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.acceptFriendRequestStmt != nil {
		if cerr := q.acceptFriendRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing acceptFriendRequestStmt: %w", cerr)
		}
	}
	if q.addBookStmt != nil {
		if cerr := q.addBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addBookStmt: %w", cerr)
		}
	}
	if q.addCountStmt != nil {
		if cerr := q.addCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addCountStmt: %w", cerr)
		}
	}
	if q.addTimeTableStmt != nil {
		if cerr := q.addTimeTableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addTimeTableStmt: %w", cerr)
		}
	}
	if q.checkChildDetailStmt != nil {
		if cerr := q.checkChildDetailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkChildDetailStmt: %w", cerr)
		}
	}
	if q.checkFriendsListStmt != nil {
		if cerr := q.checkFriendsListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkFriendsListStmt: %w", cerr)
		}
	}
	if q.checkUsernameAvailabilityStmt != nil {
		if cerr := q.checkUsernameAvailabilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkUsernameAvailabilityStmt: %w", cerr)
		}
	}
	if q.compairKeyStmt != nil {
		if cerr := q.compairKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing compairKeyStmt: %w", cerr)
		}
	}
	if q.createBookHistoryStmt != nil {
		if cerr := q.createBookHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBookHistoryStmt: %w", cerr)
		}
	}
	if q.createChildStmt != nil {
		if cerr := q.createChildStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createChildStmt: %w", cerr)
		}
	}
	if q.createChildDetailStmt != nil {
		if cerr := q.createChildDetailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createChildDetailStmt: %w", cerr)
		}
	}
	if q.createChildNotificationStmt != nil {
		if cerr := q.createChildNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createChildNotificationStmt: %w", cerr)
		}
	}
	if q.createChildTokenStmt != nil {
		if cerr := q.createChildTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createChildTokenStmt: %w", cerr)
		}
	}
	if q.createFriendsLobbyQuestionsStmt != nil {
		if cerr := q.createFriendsLobbyQuestionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFriendsLobbyQuestionsStmt: %w", cerr)
		}
	}
	if q.createGameFriendLobbyStmt != nil {
		if cerr := q.createGameFriendLobbyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGameFriendLobbyStmt: %w", cerr)
		}
	}
	if q.createGameNotificationStmt != nil {
		if cerr := q.createGameNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGameNotificationStmt: %w", cerr)
		}
	}
	if q.createGameRandomLobbyStmt != nil {
		if cerr := q.createGameRandomLobbyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGameRandomLobbyStmt: %w", cerr)
		}
	}
	if q.createGeneralVideoStmt != nil {
		if cerr := q.createGeneralVideoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGeneralVideoStmt: %w", cerr)
		}
	}
	if q.createParentStmt != nil {
		if cerr := q.createParentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createParentStmt: %w", cerr)
		}
	}
	if q.createParentDetailStmt != nil {
		if cerr := q.createParentDetailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createParentDetailStmt: %w", cerr)
		}
	}
	if q.createParentsNotificationStmt != nil {
		if cerr := q.createParentsNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createParentsNotificationStmt: %w", cerr)
		}
	}
	if q.createParentsTokenStmt != nil {
		if cerr := q.createParentsTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createParentsTokenStmt: %w", cerr)
		}
	}
	if q.createPaymentStmt != nil {
		if cerr := q.createPaymentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPaymentStmt: %w", cerr)
		}
	}
	if q.createPaymentNumberStmt != nil {
		if cerr := q.createPaymentNumberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPaymentNumberStmt: %w", cerr)
		}
	}
	if q.createQuestionsStmt != nil {
		if cerr := q.createQuestionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createQuestionsStmt: %w", cerr)
		}
	}
	if q.createQueueStmt != nil {
		if cerr := q.createQueueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createQueueStmt: %w", cerr)
		}
	}
	if q.createRandomLobbyQuestionsStmt != nil {
		if cerr := q.createRandomLobbyQuestionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRandomLobbyQuestionsStmt: %w", cerr)
		}
	}
	if q.createSaveBookStmt != nil {
		if cerr := q.createSaveBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSaveBookStmt: %w", cerr)
		}
	}
	if q.createScoreStmt != nil {
		if cerr := q.createScoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createScoreStmt: %w", cerr)
		}
	}
	if q.createVideoStmt != nil {
		if cerr := q.createVideoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createVideoStmt: %w", cerr)
		}
	}
	if q.deleteChildNotificationStmt != nil {
		if cerr := q.deleteChildNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteChildNotificationStmt: %w", cerr)
		}
	}
	if q.deleteGameFriendLobbyStmt != nil {
		if cerr := q.deleteGameFriendLobbyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGameFriendLobbyStmt: %w", cerr)
		}
	}
	if q.deleteGameNotificationStmt != nil {
		if cerr := q.deleteGameNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGameNotificationStmt: %w", cerr)
		}
	}
	if q.deleteGameRandomLobbyStmt != nil {
		if cerr := q.deleteGameRandomLobbyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGameRandomLobbyStmt: %w", cerr)
		}
	}
	if q.editChildDetailStmt != nil {
		if cerr := q.editChildDetailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing editChildDetailStmt: %w", cerr)
		}
	}
	if q.editParentDetailStmt != nil {
		if cerr := q.editParentDetailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing editParentDetailStmt: %w", cerr)
		}
	}
	if q.fetchBookAfterCreatedStmt != nil {
		if cerr := q.fetchBookAfterCreatedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing fetchBookAfterCreatedStmt: %w", cerr)
		}
	}
	if q.fetchBookByIdStmt != nil {
		if cerr := q.fetchBookByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing fetchBookByIdStmt: %w", cerr)
		}
	}
	if q.fetchBookContentStmt != nil {
		if cerr := q.fetchBookContentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing fetchBookContentStmt: %w", cerr)
		}
	}
	if q.fetchBookCountStmt != nil {
		if cerr := q.fetchBookCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing fetchBookCountStmt: %w", cerr)
		}
	}
	if q.fetchBookDetailsByIdStmt != nil {
		if cerr := q.fetchBookDetailsByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing fetchBookDetailsByIdStmt: %w", cerr)
		}
	}
	if q.fetchBookHistoryStmt != nil {
		if cerr := q.fetchBookHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing fetchBookHistoryStmt: %w", cerr)
		}
	}
	if q.fetchBookHistoryListStmt != nil {
		if cerr := q.fetchBookHistoryListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing fetchBookHistoryListStmt: %w", cerr)
		}
	}
	if q.fetchBookListBySectionStmt != nil {
		if cerr := q.fetchBookListBySectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing fetchBookListBySectionStmt: %w", cerr)
		}
	}
	if q.fetchBookListHomeStmt != nil {
		if cerr := q.fetchBookListHomeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing fetchBookListHomeStmt: %w", cerr)
		}
	}
	if q.fetchNewBookStmt != nil {
		if cerr := q.fetchNewBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing fetchNewBookStmt: %w", cerr)
		}
	}
	if q.fetchPopularBookStmt != nil {
		if cerr := q.fetchPopularBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing fetchPopularBookStmt: %w", cerr)
		}
	}
	if q.fetchPopularBookListBySectionStmt != nil {
		if cerr := q.fetchPopularBookListBySectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing fetchPopularBookListBySectionStmt: %w", cerr)
		}
	}
	if q.fetchSavedBookStmt != nil {
		if cerr := q.fetchSavedBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing fetchSavedBookStmt: %w", cerr)
		}
	}
	if q.fetchSavedBookListStmt != nil {
		if cerr := q.fetchSavedBookListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing fetchSavedBookListStmt: %w", cerr)
		}
	}
	if q.getChildStmt != nil {
		if cerr := q.getChildStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChildStmt: %w", cerr)
		}
	}
	if q.getChildDetailStmt != nil {
		if cerr := q.getChildDetailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChildDetailStmt: %w", cerr)
		}
	}
	if q.getChildDetailListOnCountryStmt != nil {
		if cerr := q.getChildDetailListOnCountryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChildDetailListOnCountryStmt: %w", cerr)
		}
	}
	if q.getChildDetailListOnStateStmt != nil {
		if cerr := q.getChildDetailListOnStateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChildDetailListOnStateStmt: %w", cerr)
		}
	}
	if q.getChildForVerifyStmt != nil {
		if cerr := q.getChildForVerifyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChildForVerifyStmt: %w", cerr)
		}
	}
	if q.getChildNotificationStmt != nil {
		if cerr := q.getChildNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChildNotificationStmt: %w", cerr)
		}
	}
	if q.getChildTokenStmt != nil {
		if cerr := q.getChildTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChildTokenStmt: %w", cerr)
		}
	}
	if q.getChildrenDetailsStmt != nil {
		if cerr := q.getChildrenDetailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChildrenDetailsStmt: %w", cerr)
		}
	}
	if q.getClassVideoStmt != nil {
		if cerr := q.getClassVideoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassVideoStmt: %w", cerr)
		}
	}
	if q.getClassVideoFreeStmt != nil {
		if cerr := q.getClassVideoFreeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassVideoFreeStmt: %w", cerr)
		}
	}
	if q.getFakeGameRandomLobbyByClassStmt != nil {
		if cerr := q.getFakeGameRandomLobbyByClassStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFakeGameRandomLobbyByClassStmt: %w", cerr)
		}
	}
	if q.getFriendStmt != nil {
		if cerr := q.getFriendStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFriendStmt: %w", cerr)
		}
	}
	if q.getFriendsListStmt != nil {
		if cerr := q.getFriendsListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFriendsListStmt: %w", cerr)
		}
	}
	if q.getFriendsLobbyQuestionsStmt != nil {
		if cerr := q.getFriendsLobbyQuestionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFriendsLobbyQuestionsStmt: %w", cerr)
		}
	}
	if q.getGameFriendLobbyStmt != nil {
		if cerr := q.getGameFriendLobbyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGameFriendLobbyStmt: %w", cerr)
		}
	}
	if q.getGameNotificationStmt != nil {
		if cerr := q.getGameNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGameNotificationStmt: %w", cerr)
		}
	}
	if q.getGameRandomLobbyStmt != nil {
		if cerr := q.getGameRandomLobbyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGameRandomLobbyStmt: %w", cerr)
		}
	}
	if q.getGameRandomLobbyByIdStmt != nil {
		if cerr := q.getGameRandomLobbyByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGameRandomLobbyByIdStmt: %w", cerr)
		}
	}
	if q.getGeneralVideoStmt != nil {
		if cerr := q.getGeneralVideoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGeneralVideoStmt: %w", cerr)
		}
	}
	if q.getListGeneralVideoStmt != nil {
		if cerr := q.getListGeneralVideoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getListGeneralVideoStmt: %w", cerr)
		}
	}
	if q.getOwnQueueInfoStmt != nil {
		if cerr := q.getOwnQueueInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOwnQueueInfoStmt: %w", cerr)
		}
	}
	if q.getParentStmt != nil {
		if cerr := q.getParentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getParentStmt: %w", cerr)
		}
	}
	if q.getParentByRandomKeyStmt != nil {
		if cerr := q.getParentByRandomKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getParentByRandomKeyStmt: %w", cerr)
		}
	}
	if q.getParentDetailStmt != nil {
		if cerr := q.getParentDetailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getParentDetailStmt: %w", cerr)
		}
	}
	if q.getParentForLoginStmt != nil {
		if cerr := q.getParentForLoginStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getParentForLoginStmt: %w", cerr)
		}
	}
	if q.getParentIdStmt != nil {
		if cerr := q.getParentIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getParentIdStmt: %w", cerr)
		}
	}
	if q.getParentInfoStmt != nil {
		if cerr := q.getParentInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getParentInfoStmt: %w", cerr)
		}
	}
	if q.getParentsNotificationStmt != nil {
		if cerr := q.getParentsNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getParentsNotificationStmt: %w", cerr)
		}
	}
	if q.getParentsTokenStmt != nil {
		if cerr := q.getParentsTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getParentsTokenStmt: %w", cerr)
		}
	}
	if q.getPaymentStmt != nil {
		if cerr := q.getPaymentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPaymentStmt: %w", cerr)
		}
	}
	if q.getPaymentListStmt != nil {
		if cerr := q.getPaymentListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPaymentListStmt: %w", cerr)
		}
	}
	if q.getPaymentNumberInfoStmt != nil {
		if cerr := q.getPaymentNumberInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPaymentNumberInfoStmt: %w", cerr)
		}
	}
	if q.getQuestionsStmt != nil {
		if cerr := q.getQuestionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQuestionsStmt: %w", cerr)
		}
	}
	if q.getQueueStmt != nil {
		if cerr := q.getQueueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQueueStmt: %w", cerr)
		}
	}
	if q.getRandomLobbyQuestionsStmt != nil {
		if cerr := q.getRandomLobbyQuestionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRandomLobbyQuestionsStmt: %w", cerr)
		}
	}
	if q.getScoreStmt != nil {
		if cerr := q.getScoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getScoreStmt: %w", cerr)
		}
	}
	if q.getScoreListStmt != nil {
		if cerr := q.getScoreListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getScoreListStmt: %w", cerr)
		}
	}
	if q.getSubjectVideoStmt != nil {
		if cerr := q.getSubjectVideoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSubjectVideoStmt: %w", cerr)
		}
	}
	if q.getSubjectVideoFreeStmt != nil {
		if cerr := q.getSubjectVideoFreeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSubjectVideoFreeStmt: %w", cerr)
		}
	}
	if q.getTimeTableStmt != nil {
		if cerr := q.getTimeTableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTimeTableStmt: %w", cerr)
		}
	}
	if q.getVideoStmt != nil {
		if cerr := q.getVideoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVideoStmt: %w", cerr)
		}
	}
	if q.rejectFriendRequestStmt != nil {
		if cerr := q.rejectFriendRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing rejectFriendRequestStmt: %w", cerr)
		}
	}
	if q.removeChildTokenStmt != nil {
		if cerr := q.removeChildTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeChildTokenStmt: %w", cerr)
		}
	}
	if q.removeOTPStmt != nil {
		if cerr := q.removeOTPStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeOTPStmt: %w", cerr)
		}
	}
	if q.removeParentsTokenStmt != nil {
		if cerr := q.removeParentsTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeParentsTokenStmt: %w", cerr)
		}
	}
	if q.removeQueueStmt != nil {
		if cerr := q.removeQueueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeQueueStmt: %w", cerr)
		}
	}
	if q.removeTimeTableAllStmt != nil {
		if cerr := q.removeTimeTableAllStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeTimeTableAllStmt: %w", cerr)
		}
	}
	if q.removeTimeTableByDescriptionStmt != nil {
		if cerr := q.removeTimeTableByDescriptionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeTimeTableByDescriptionStmt: %w", cerr)
		}
	}
	if q.removedSavedBookStmt != nil {
		if cerr := q.removedSavedBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removedSavedBookStmt: %w", cerr)
		}
	}
	if q.saveOTPStmt != nil {
		if cerr := q.saveOTPStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing saveOTPStmt: %w", cerr)
		}
	}
	if q.savepasswordStmt != nil {
		if cerr := q.savepasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing savepasswordStmt: %w", cerr)
		}
	}
	if q.sendFriendRequestStmt != nil {
		if cerr := q.sendFriendRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing sendFriendRequestStmt: %w", cerr)
		}
	}
	if q.setVerificationStmt != nil {
		if cerr := q.setVerificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setVerificationStmt: %w", cerr)
		}
	}
	if q.setVerificationChildStmt != nil {
		if cerr := q.setVerificationChildStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setVerificationChildStmt: %w", cerr)
		}
	}
	if q.updateBookStmt != nil {
		if cerr := q.updateBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBookStmt: %w", cerr)
		}
	}
	if q.updateBookCountStmt != nil {
		if cerr := q.updateBookCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBookCountStmt: %w", cerr)
		}
	}
	if q.updateBookHistoryStmt != nil {
		if cerr := q.updateBookHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBookHistoryStmt: %w", cerr)
		}
	}
	if q.updateChildTokenStmt != nil {
		if cerr := q.updateChildTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateChildTokenStmt: %w", cerr)
		}
	}
	if q.updateGameFriendLobbyStmt != nil {
		if cerr := q.updateGameFriendLobbyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGameFriendLobbyStmt: %w", cerr)
		}
	}
	if q.updateGameRandomLobbyStmt != nil {
		if cerr := q.updateGameRandomLobbyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGameRandomLobbyStmt: %w", cerr)
		}
	}
	if q.updateParentsTokenStmt != nil {
		if cerr := q.updateParentsTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateParentsTokenStmt: %w", cerr)
		}
	}
	if q.updateQueueStmt != nil {
		if cerr := q.updateQueueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateQueueStmt: %w", cerr)
		}
	}
	if q.updateQueueLobbyStmt != nil {
		if cerr := q.updateQueueLobbyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateQueueLobbyStmt: %w", cerr)
		}
	}
	if q.updateScorePlayerOneStmt != nil {
		if cerr := q.updateScorePlayerOneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateScorePlayerOneStmt: %w", cerr)
		}
	}
	if q.updateScorePlayerTwoStmt != nil {
		if cerr := q.updateScorePlayerTwoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateScorePlayerTwoStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                DBTX
	tx                                *sql.Tx
	acceptFriendRequestStmt           *sql.Stmt
	addBookStmt                       *sql.Stmt
	addCountStmt                      *sql.Stmt
	addTimeTableStmt                  *sql.Stmt
	checkChildDetailStmt              *sql.Stmt
	checkFriendsListStmt              *sql.Stmt
	checkUsernameAvailabilityStmt     *sql.Stmt
	compairKeyStmt                    *sql.Stmt
	createBookHistoryStmt             *sql.Stmt
	createChildStmt                   *sql.Stmt
	createChildDetailStmt             *sql.Stmt
	createChildNotificationStmt       *sql.Stmt
	createChildTokenStmt              *sql.Stmt
	createFriendsLobbyQuestionsStmt   *sql.Stmt
	createGameFriendLobbyStmt         *sql.Stmt
	createGameNotificationStmt        *sql.Stmt
	createGameRandomLobbyStmt         *sql.Stmt
	createGeneralVideoStmt            *sql.Stmt
	createParentStmt                  *sql.Stmt
	createParentDetailStmt            *sql.Stmt
	createParentsNotificationStmt     *sql.Stmt
	createParentsTokenStmt            *sql.Stmt
	createPaymentStmt                 *sql.Stmt
	createPaymentNumberStmt           *sql.Stmt
	createQuestionsStmt               *sql.Stmt
	createQueueStmt                   *sql.Stmt
	createRandomLobbyQuestionsStmt    *sql.Stmt
	createSaveBookStmt                *sql.Stmt
	createScoreStmt                   *sql.Stmt
	createVideoStmt                   *sql.Stmt
	deleteChildNotificationStmt       *sql.Stmt
	deleteGameFriendLobbyStmt         *sql.Stmt
	deleteGameNotificationStmt        *sql.Stmt
	deleteGameRandomLobbyStmt         *sql.Stmt
	editChildDetailStmt               *sql.Stmt
	editParentDetailStmt              *sql.Stmt
	fetchBookAfterCreatedStmt         *sql.Stmt
	fetchBookByIdStmt                 *sql.Stmt
	fetchBookContentStmt              *sql.Stmt
	fetchBookCountStmt                *sql.Stmt
	fetchBookDetailsByIdStmt          *sql.Stmt
	fetchBookHistoryStmt              *sql.Stmt
	fetchBookHistoryListStmt          *sql.Stmt
	fetchBookListBySectionStmt        *sql.Stmt
	fetchBookListHomeStmt             *sql.Stmt
	fetchNewBookStmt                  *sql.Stmt
	fetchPopularBookStmt              *sql.Stmt
	fetchPopularBookListBySectionStmt *sql.Stmt
	fetchSavedBookStmt                *sql.Stmt
	fetchSavedBookListStmt            *sql.Stmt
	getChildStmt                      *sql.Stmt
	getChildDetailStmt                *sql.Stmt
	getChildDetailListOnCountryStmt   *sql.Stmt
	getChildDetailListOnStateStmt     *sql.Stmt
	getChildForVerifyStmt             *sql.Stmt
	getChildNotificationStmt          *sql.Stmt
	getChildTokenStmt                 *sql.Stmt
	getChildrenDetailsStmt            *sql.Stmt
	getClassVideoStmt                 *sql.Stmt
	getClassVideoFreeStmt             *sql.Stmt
	getFakeGameRandomLobbyByClassStmt *sql.Stmt
	getFriendStmt                     *sql.Stmt
	getFriendsListStmt                *sql.Stmt
	getFriendsLobbyQuestionsStmt      *sql.Stmt
	getGameFriendLobbyStmt            *sql.Stmt
	getGameNotificationStmt           *sql.Stmt
	getGameRandomLobbyStmt            *sql.Stmt
	getGameRandomLobbyByIdStmt        *sql.Stmt
	getGeneralVideoStmt               *sql.Stmt
	getListGeneralVideoStmt           *sql.Stmt
	getOwnQueueInfoStmt               *sql.Stmt
	getParentStmt                     *sql.Stmt
	getParentByRandomKeyStmt          *sql.Stmt
	getParentDetailStmt               *sql.Stmt
	getParentForLoginStmt             *sql.Stmt
	getParentIdStmt                   *sql.Stmt
	getParentInfoStmt                 *sql.Stmt
	getParentsNotificationStmt        *sql.Stmt
	getParentsTokenStmt               *sql.Stmt
	getPaymentStmt                    *sql.Stmt
	getPaymentListStmt                *sql.Stmt
	getPaymentNumberInfoStmt          *sql.Stmt
	getQuestionsStmt                  *sql.Stmt
	getQueueStmt                      *sql.Stmt
	getRandomLobbyQuestionsStmt       *sql.Stmt
	getScoreStmt                      *sql.Stmt
	getScoreListStmt                  *sql.Stmt
	getSubjectVideoStmt               *sql.Stmt
	getSubjectVideoFreeStmt           *sql.Stmt
	getTimeTableStmt                  *sql.Stmt
	getVideoStmt                      *sql.Stmt
	rejectFriendRequestStmt           *sql.Stmt
	removeChildTokenStmt              *sql.Stmt
	removeOTPStmt                     *sql.Stmt
	removeParentsTokenStmt            *sql.Stmt
	removeQueueStmt                   *sql.Stmt
	removeTimeTableAllStmt            *sql.Stmt
	removeTimeTableByDescriptionStmt  *sql.Stmt
	removedSavedBookStmt              *sql.Stmt
	saveOTPStmt                       *sql.Stmt
	savepasswordStmt                  *sql.Stmt
	sendFriendRequestStmt             *sql.Stmt
	setVerificationStmt               *sql.Stmt
	setVerificationChildStmt          *sql.Stmt
	updateBookStmt                    *sql.Stmt
	updateBookCountStmt               *sql.Stmt
	updateBookHistoryStmt             *sql.Stmt
	updateChildTokenStmt              *sql.Stmt
	updateGameFriendLobbyStmt         *sql.Stmt
	updateGameRandomLobbyStmt         *sql.Stmt
	updateParentsTokenStmt            *sql.Stmt
	updateQueueStmt                   *sql.Stmt
	updateQueueLobbyStmt              *sql.Stmt
	updateScorePlayerOneStmt          *sql.Stmt
	updateScorePlayerTwoStmt          *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                tx,
		tx:                                tx,
		acceptFriendRequestStmt:           q.acceptFriendRequestStmt,
		addBookStmt:                       q.addBookStmt,
		addCountStmt:                      q.addCountStmt,
		addTimeTableStmt:                  q.addTimeTableStmt,
		checkChildDetailStmt:              q.checkChildDetailStmt,
		checkFriendsListStmt:              q.checkFriendsListStmt,
		checkUsernameAvailabilityStmt:     q.checkUsernameAvailabilityStmt,
		compairKeyStmt:                    q.compairKeyStmt,
		createBookHistoryStmt:             q.createBookHistoryStmt,
		createChildStmt:                   q.createChildStmt,
		createChildDetailStmt:             q.createChildDetailStmt,
		createChildNotificationStmt:       q.createChildNotificationStmt,
		createChildTokenStmt:              q.createChildTokenStmt,
		createFriendsLobbyQuestionsStmt:   q.createFriendsLobbyQuestionsStmt,
		createGameFriendLobbyStmt:         q.createGameFriendLobbyStmt,
		createGameNotificationStmt:        q.createGameNotificationStmt,
		createGameRandomLobbyStmt:         q.createGameRandomLobbyStmt,
		createGeneralVideoStmt:            q.createGeneralVideoStmt,
		createParentStmt:                  q.createParentStmt,
		createParentDetailStmt:            q.createParentDetailStmt,
		createParentsNotificationStmt:     q.createParentsNotificationStmt,
		createParentsTokenStmt:            q.createParentsTokenStmt,
		createPaymentStmt:                 q.createPaymentStmt,
		createPaymentNumberStmt:           q.createPaymentNumberStmt,
		createQuestionsStmt:               q.createQuestionsStmt,
		createQueueStmt:                   q.createQueueStmt,
		createRandomLobbyQuestionsStmt:    q.createRandomLobbyQuestionsStmt,
		createSaveBookStmt:                q.createSaveBookStmt,
		createScoreStmt:                   q.createScoreStmt,
		createVideoStmt:                   q.createVideoStmt,
		deleteChildNotificationStmt:       q.deleteChildNotificationStmt,
		deleteGameFriendLobbyStmt:         q.deleteGameFriendLobbyStmt,
		deleteGameNotificationStmt:        q.deleteGameNotificationStmt,
		deleteGameRandomLobbyStmt:         q.deleteGameRandomLobbyStmt,
		editChildDetailStmt:               q.editChildDetailStmt,
		editParentDetailStmt:              q.editParentDetailStmt,
		fetchBookAfterCreatedStmt:         q.fetchBookAfterCreatedStmt,
		fetchBookByIdStmt:                 q.fetchBookByIdStmt,
		fetchBookContentStmt:              q.fetchBookContentStmt,
		fetchBookCountStmt:                q.fetchBookCountStmt,
		fetchBookDetailsByIdStmt:          q.fetchBookDetailsByIdStmt,
		fetchBookHistoryStmt:              q.fetchBookHistoryStmt,
		fetchBookHistoryListStmt:          q.fetchBookHistoryListStmt,
		fetchBookListBySectionStmt:        q.fetchBookListBySectionStmt,
		fetchBookListHomeStmt:             q.fetchBookListHomeStmt,
		fetchNewBookStmt:                  q.fetchNewBookStmt,
		fetchPopularBookStmt:              q.fetchPopularBookStmt,
		fetchPopularBookListBySectionStmt: q.fetchPopularBookListBySectionStmt,
		fetchSavedBookStmt:                q.fetchSavedBookStmt,
		fetchSavedBookListStmt:            q.fetchSavedBookListStmt,
		getChildStmt:                      q.getChildStmt,
		getChildDetailStmt:                q.getChildDetailStmt,
		getChildDetailListOnCountryStmt:   q.getChildDetailListOnCountryStmt,
		getChildDetailListOnStateStmt:     q.getChildDetailListOnStateStmt,
		getChildForVerifyStmt:             q.getChildForVerifyStmt,
		getChildNotificationStmt:          q.getChildNotificationStmt,
		getChildTokenStmt:                 q.getChildTokenStmt,
		getChildrenDetailsStmt:            q.getChildrenDetailsStmt,
		getClassVideoStmt:                 q.getClassVideoStmt,
		getClassVideoFreeStmt:             q.getClassVideoFreeStmt,
		getFakeGameRandomLobbyByClassStmt: q.getFakeGameRandomLobbyByClassStmt,
		getFriendStmt:                     q.getFriendStmt,
		getFriendsListStmt:                q.getFriendsListStmt,
		getFriendsLobbyQuestionsStmt:      q.getFriendsLobbyQuestionsStmt,
		getGameFriendLobbyStmt:            q.getGameFriendLobbyStmt,
		getGameNotificationStmt:           q.getGameNotificationStmt,
		getGameRandomLobbyStmt:            q.getGameRandomLobbyStmt,
		getGameRandomLobbyByIdStmt:        q.getGameRandomLobbyByIdStmt,
		getGeneralVideoStmt:               q.getGeneralVideoStmt,
		getListGeneralVideoStmt:           q.getListGeneralVideoStmt,
		getOwnQueueInfoStmt:               q.getOwnQueueInfoStmt,
		getParentStmt:                     q.getParentStmt,
		getParentByRandomKeyStmt:          q.getParentByRandomKeyStmt,
		getParentDetailStmt:               q.getParentDetailStmt,
		getParentForLoginStmt:             q.getParentForLoginStmt,
		getParentIdStmt:                   q.getParentIdStmt,
		getParentInfoStmt:                 q.getParentInfoStmt,
		getParentsNotificationStmt:        q.getParentsNotificationStmt,
		getParentsTokenStmt:               q.getParentsTokenStmt,
		getPaymentStmt:                    q.getPaymentStmt,
		getPaymentListStmt:                q.getPaymentListStmt,
		getPaymentNumberInfoStmt:          q.getPaymentNumberInfoStmt,
		getQuestionsStmt:                  q.getQuestionsStmt,
		getQueueStmt:                      q.getQueueStmt,
		getRandomLobbyQuestionsStmt:       q.getRandomLobbyQuestionsStmt,
		getScoreStmt:                      q.getScoreStmt,
		getScoreListStmt:                  q.getScoreListStmt,
		getSubjectVideoStmt:               q.getSubjectVideoStmt,
		getSubjectVideoFreeStmt:           q.getSubjectVideoFreeStmt,
		getTimeTableStmt:                  q.getTimeTableStmt,
		getVideoStmt:                      q.getVideoStmt,
		rejectFriendRequestStmt:           q.rejectFriendRequestStmt,
		removeChildTokenStmt:              q.removeChildTokenStmt,
		removeOTPStmt:                     q.removeOTPStmt,
		removeParentsTokenStmt:            q.removeParentsTokenStmt,
		removeQueueStmt:                   q.removeQueueStmt,
		removeTimeTableAllStmt:            q.removeTimeTableAllStmt,
		removeTimeTableByDescriptionStmt:  q.removeTimeTableByDescriptionStmt,
		removedSavedBookStmt:              q.removedSavedBookStmt,
		saveOTPStmt:                       q.saveOTPStmt,
		savepasswordStmt:                  q.savepasswordStmt,
		sendFriendRequestStmt:             q.sendFriendRequestStmt,
		setVerificationStmt:               q.setVerificationStmt,
		setVerificationChildStmt:          q.setVerificationChildStmt,
		updateBookStmt:                    q.updateBookStmt,
		updateBookCountStmt:               q.updateBookCountStmt,
		updateBookHistoryStmt:             q.updateBookHistoryStmt,
		updateChildTokenStmt:              q.updateChildTokenStmt,
		updateGameFriendLobbyStmt:         q.updateGameFriendLobbyStmt,
		updateGameRandomLobbyStmt:         q.updateGameRandomLobbyStmt,
		updateParentsTokenStmt:            q.updateParentsTokenStmt,
		updateQueueStmt:                   q.updateQueueStmt,
		updateQueueLobbyStmt:              q.updateQueueLobbyStmt,
		updateScorePlayerOneStmt:          q.updateScorePlayerOneStmt,
		updateScorePlayerTwoStmt:          q.updateScorePlayerTwoStmt,
	}
}
