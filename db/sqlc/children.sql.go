// Code generated by sqlc. DO NOT EDIT.
// source: children.sql

package db

import (
	"context"
	"database/sql"
)

const checkChildDetail = `-- name: CheckChildDetail :one
SELECT COUNT(*) FROM children_detail WHERE children_id=?
`

func (q *Queries) CheckChildDetail(ctx context.Context, childrenID int32) (int64, error) {
	row := q.queryRow(ctx, q.checkChildDetailStmt, checkChildDetail, childrenID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkUsernameAvailability = `-- name: CheckUsernameAvailability :one
SELECT COUNT(*) FROM children WHERE username=?
`

func (q *Queries) CheckUsernameAvailability(ctx context.Context, username string) (int64, error) {
	row := q.queryRow(ctx, q.checkUsernameAvailabilityStmt, checkUsernameAvailability, username)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createChild = `-- name: CreateChild :exec
INSERT INTO children(
    parent_id, username, password 
) VALUES (
    ?,?,?
)
`

type CreateChildParams struct {
	ParentID int32  `json:"parent_id"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) CreateChild(ctx context.Context, arg CreateChildParams) error {
	_, err := q.exec(ctx, q.createChildStmt, createChild, arg.ParentID, arg.Username, arg.Password)
	return err
}

const getChild = `-- name: GetChild :one
SELECT children.id,children.isVerified, children.username, children.password, children_detail.full_name,children.created_at,
children_detail.date_of_birth, children_detail.gender, children_detail.school,
children_detail.grade,
 children_detail.country, children_detail.state FROM children LEFT JOIN children_detail
 ON children.id  = children_detail.children_id WHERE 
children.username=?
`

type GetChildRow struct {
	ID          int32          `json:"id"`
	Isverified  sql.NullBool   `json:"isverified"`
	Username    string         `json:"username"`
	Password    string         `json:"password"`
	FullName    sql.NullString `json:"full_name"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	DateOfBirth sql.NullString `json:"date_of_birth"`
	Gender      sql.NullString `json:"gender"`
	School      sql.NullString `json:"school"`
	Grade       sql.NullInt32  `json:"grade"`
	Country     sql.NullString `json:"country"`
	State       sql.NullString `json:"state"`
}

func (q *Queries) GetChild(ctx context.Context, username string) (GetChildRow, error) {
	row := q.queryRow(ctx, q.getChildStmt, getChild, username)
	var i GetChildRow
	err := row.Scan(
		&i.ID,
		&i.Isverified,
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.CreatedAt,
		&i.DateOfBirth,
		&i.Gender,
		&i.School,
		&i.Grade,
		&i.Country,
		&i.State,
	)
	return i, err
}

const getChildForVerify = `-- name: GetChildForVerify :one
SELECT id, parent_id, username, password, isverified, created_at, deleted_at FROM children WHERE id=?
`

func (q *Queries) GetChildForVerify(ctx context.Context, id int32) (Child, error) {
	row := q.queryRow(ctx, q.getChildForVerifyStmt, getChildForVerify, id)
	var i Child
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Username,
		&i.Password,
		&i.Isverified,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getParentId = `-- name: GetParentId :one
SELECT parent_id FROM children WHERE id=?
`

func (q *Queries) GetParentId(ctx context.Context, id int32) (int32, error) {
	row := q.queryRow(ctx, q.getParentIdStmt, getParentId, id)
	var parent_id int32
	err := row.Scan(&parent_id)
	return parent_id, err
}

const setVerificationChild = `-- name: SetVerificationChild :exec
UPDATE children SET isVerified=1 WHERE parent_id=?
`

func (q *Queries) SetVerificationChild(ctx context.Context, parentID int32) error {
	_, err := q.exec(ctx, q.setVerificationChildStmt, setVerificationChild, parentID)
	return err
}
