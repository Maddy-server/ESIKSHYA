// Code generated by sqlc. DO NOT EDIT.
// source: time_table.sql

package db

import (
	"context"
	"database/sql"
)

const addTimeTable = `-- name: AddTimeTable :exec
INSERT INTO time_table(
    children_id, class, section, description, day, start_time, end_time
) VALUES (
    ?,?,?,?,?,?,?
)
`

type AddTimeTableParams struct {
	ChildrenID  int32          `json:"children_id"`
	Class       int32          `json:"class"`
	Section     string         `json:"section"`
	Description string         `json:"description"`
	Day         string         `json:"day"`
	StartTime   sql.NullString `json:"start_time"`
	EndTime     sql.NullString `json:"end_time"`
}

func (q *Queries) AddTimeTable(ctx context.Context, arg AddTimeTableParams) error {
	_, err := q.exec(ctx, q.addTimeTableStmt, addTimeTable,
		arg.ChildrenID,
		arg.Class,
		arg.Section,
		arg.Description,
		arg.Day,
		arg.StartTime,
		arg.EndTime,
	)
	return err
}

const getTimeTable = `-- name: GetTimeTable :many
SELECT id, children_id, class, section, description, day, start_time, end_time FROM time_table WHERE children_id=?
`

func (q *Queries) GetTimeTable(ctx context.Context, childrenID int32) ([]TimeTable, error) {
	rows, err := q.query(ctx, q.getTimeTableStmt, getTimeTable, childrenID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TimeTable
	for rows.Next() {
		var i TimeTable
		if err := rows.Scan(
			&i.ID,
			&i.ChildrenID,
			&i.Class,
			&i.Section,
			&i.Description,
			&i.Day,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTimeTableAll = `-- name: RemoveTimeTableAll :exec
DELETE FROM time_table WHERE children_id=?
`

func (q *Queries) RemoveTimeTableAll(ctx context.Context, childrenID int32) error {
	_, err := q.exec(ctx, q.removeTimeTableAllStmt, removeTimeTableAll, childrenID)
	return err
}

const removeTimeTableByDescription = `-- name: RemoveTimeTableByDescription :exec
DELETE FROM time_table WHERE description=?
`

func (q *Queries) RemoveTimeTableByDescription(ctx context.Context, description string) error {
	_, err := q.exec(ctx, q.removeTimeTableByDescriptionStmt, removeTimeTableByDescription, description)
	return err
}
