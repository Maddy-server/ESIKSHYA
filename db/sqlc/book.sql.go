// Code generated by sqlc. DO NOT EDIT.
// source: book.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addBook = `-- name: AddBook :exec
INSERT INTO book(
    book_name, writer, section, randomunique,created_at
) VALUES (
    ?,?,?,?,?
)
`

type AddBookParams struct {
	BookName     string    `json:"book_name"`
	Writer       string    `json:"writer"`
	Section      string    `json:"section"`
	Randomunique string    `json:"randomunique"`
	CreatedAt    time.Time `json:"created_at"`
}

func (q *Queries) AddBook(ctx context.Context, arg AddBookParams) error {
	_, err := q.exec(ctx, q.addBookStmt, addBook,
		arg.BookName,
		arg.Writer,
		arg.Section,
		arg.Randomunique,
		arg.CreatedAt,
	)
	return err
}

const fetchBookAfterCreated = `-- name: FetchBookAfterCreated :one
SELECT id, book_name, content, writer, section, randomunique, description, created_at, deleted_at FROM book WHERE randomunique=?
`

func (q *Queries) FetchBookAfterCreated(ctx context.Context, randomunique string) (Book, error) {
	row := q.queryRow(ctx, q.fetchBookAfterCreatedStmt, fetchBookAfterCreated, randomunique)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.BookName,
		&i.Content,
		&i.Writer,
		&i.Section,
		&i.Randomunique,
		&i.Description,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const fetchBookById = `-- name: FetchBookById :one
SELECT book.id, book.book_name, book_count.count FROM book JOIN book_count ON book.id = book_count.book_id WHERE book.id=?
`

type FetchBookByIdRow struct {
	ID       int32  `json:"id"`
	BookName string `json:"book_name"`
	Count    int32  `json:"count"`
}

func (q *Queries) FetchBookById(ctx context.Context, id int32) (FetchBookByIdRow, error) {
	row := q.queryRow(ctx, q.fetchBookByIdStmt, fetchBookById, id)
	var i FetchBookByIdRow
	err := row.Scan(&i.ID, &i.BookName, &i.Count)
	return i, err
}

const fetchBookContent = `-- name: FetchBookContent :one
SELECT content FROM book WHERE id=?
`

func (q *Queries) FetchBookContent(ctx context.Context, id int32) (sql.NullString, error) {
	row := q.queryRow(ctx, q.fetchBookContentStmt, fetchBookContent, id)
	var content sql.NullString
	err := row.Scan(&content)
	return content, err
}

const fetchBookDetailsById = `-- name: FetchBookDetailsById :one
SELECT book.id, book.book_name,book.writer,book.description,book_count.count  FROM book JOIN book_count ON book.id = book_count.book_id WHERE book.id=?
`

type FetchBookDetailsByIdRow struct {
	ID          int32  `json:"id"`
	BookName    string `json:"book_name"`
	Writer      string `json:"writer"`
	Description string `json:"description"`
	Count       int32  `json:"count"`
}

func (q *Queries) FetchBookDetailsById(ctx context.Context, id int32) (FetchBookDetailsByIdRow, error) {
	row := q.queryRow(ctx, q.fetchBookDetailsByIdStmt, fetchBookDetailsById, id)
	var i FetchBookDetailsByIdRow
	err := row.Scan(
		&i.ID,
		&i.BookName,
		&i.Writer,
		&i.Description,
		&i.Count,
	)
	return i, err
}

const fetchBookListBySection = `-- name: FetchBookListBySection :many
SELECT book.id,book.book_name, book_count.count FROM book JOIN book_count ON book.id = book_count.book_id WHERE book.section=? And book.id>=? Limit 20
`

type FetchBookListBySectionParams struct {
	Section string `json:"section"`
	ID      int32  `json:"id"`
}

type FetchBookListBySectionRow struct {
	ID       int32  `json:"id"`
	BookName string `json:"book_name"`
	Count    int32  `json:"count"`
}

func (q *Queries) FetchBookListBySection(ctx context.Context, arg FetchBookListBySectionParams) ([]FetchBookListBySectionRow, error) {
	rows, err := q.query(ctx, q.fetchBookListBySectionStmt, fetchBookListBySection, arg.Section, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchBookListBySectionRow
	for rows.Next() {
		var i FetchBookListBySectionRow
		if err := rows.Scan(&i.ID, &i.BookName, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchBookListHome = `-- name: FetchBookListHome :many
SELECT book.id,book.book_name, book_count.count FROM book JOIN book_count ON book.id = book_count.book_id WHERE book.id>=? Limit 20
`

type FetchBookListHomeRow struct {
	ID       int32  `json:"id"`
	BookName string `json:"book_name"`
	Count    int32  `json:"count"`
}

func (q *Queries) FetchBookListHome(ctx context.Context, id int32) ([]FetchBookListHomeRow, error) {
	rows, err := q.query(ctx, q.fetchBookListHomeStmt, fetchBookListHome, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchBookListHomeRow
	for rows.Next() {
		var i FetchBookListHomeRow
		if err := rows.Scan(&i.ID, &i.BookName, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchNewBook = `-- name: FetchNewBook :many
SELECT book.id, book.book_name,book_count.count FROM book JOIN book_count ON book.id = book_count.book_id ORDER BY book.created_at DESC Limit 5
`

type FetchNewBookRow struct {
	ID       int32  `json:"id"`
	BookName string `json:"book_name"`
	Count    int32  `json:"count"`
}

func (q *Queries) FetchNewBook(ctx context.Context) ([]FetchNewBookRow, error) {
	rows, err := q.query(ctx, q.fetchNewBookStmt, fetchNewBook)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchNewBookRow
	for rows.Next() {
		var i FetchNewBookRow
		if err := rows.Scan(&i.ID, &i.BookName, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchPopularBook = `-- name: FetchPopularBook :many
SELECT book.id, book.book_name, book_count.count FROM book JOIN book_count ON book.id = book_count.book_id  ORDER BY book_count.count DESC Limit 5
`

type FetchPopularBookRow struct {
	ID       int32  `json:"id"`
	BookName string `json:"book_name"`
	Count    int32  `json:"count"`
}

func (q *Queries) FetchPopularBook(ctx context.Context) ([]FetchPopularBookRow, error) {
	rows, err := q.query(ctx, q.fetchPopularBookStmt, fetchPopularBook)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchPopularBookRow
	for rows.Next() {
		var i FetchPopularBookRow
		if err := rows.Scan(&i.ID, &i.BookName, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchPopularBookListBySection = `-- name: FetchPopularBookListBySection :many
SELECT book.id, book.book_name, book_count.count FROM book JOIN book_count ON book.id = book_count.book_id WHERE book.section=? ORDER BY book_count.count DESC Limit 5
`

type FetchPopularBookListBySectionRow struct {
	ID       int32  `json:"id"`
	BookName string `json:"book_name"`
	Count    int32  `json:"count"`
}

func (q *Queries) FetchPopularBookListBySection(ctx context.Context, section string) ([]FetchPopularBookListBySectionRow, error) {
	rows, err := q.query(ctx, q.fetchPopularBookListBySectionStmt, fetchPopularBookListBySection, section)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchPopularBookListBySectionRow
	for rows.Next() {
		var i FetchPopularBookListBySectionRow
		if err := rows.Scan(&i.ID, &i.BookName, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :exec
UPDATE book SET content=? WHERE id=?
`

type UpdateBookParams struct {
	Content sql.NullString `json:"content"`
	ID      int32          `json:"id"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.exec(ctx, q.updateBookStmt, updateBook, arg.Content, arg.ID)
	return err
}
