// Code generated by sqlc. DO NOT EDIT.
// source: game_random_lobby.sql

package db

import (
	"context"
	"time"
)

const createGameRandomLobby = `-- name: CreateGameRandomLobby :exec
INSERT INTO game_random_lobby(
   user_id, op_id, status,created_at,class
) VALUES (
    ?,?,?,?,?
)
`

type CreateGameRandomLobbyParams struct {
	UserID    int32     `json:"user_id"`
	OpID      int32     `json:"op_id"`
	Status    string    `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	Class     int32     `json:"class"`
}

func (q *Queries) CreateGameRandomLobby(ctx context.Context, arg CreateGameRandomLobbyParams) error {
	_, err := q.exec(ctx, q.createGameRandomLobbyStmt, createGameRandomLobby,
		arg.UserID,
		arg.OpID,
		arg.Status,
		arg.CreatedAt,
		arg.Class,
	)
	return err
}

const deleteGameRandomLobby = `-- name: DeleteGameRandomLobby :exec
DELETE FROM game_random_lobby WHERE id=?
`

func (q *Queries) DeleteGameRandomLobby(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteGameRandomLobbyStmt, deleteGameRandomLobby, id)
	return err
}

const getFakeGameRandomLobbyByClass = `-- name: GetFakeGameRandomLobbyByClass :one
SELECT id, user_id, class, op_id, status, created_at FROM game_random_lobby WHERE class=?
`

func (q *Queries) GetFakeGameRandomLobbyByClass(ctx context.Context, class int32) (GameRandomLobby, error) {
	row := q.queryRow(ctx, q.getFakeGameRandomLobbyByClassStmt, getFakeGameRandomLobbyByClass, class)
	var i GameRandomLobby
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Class,
		&i.OpID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getGameRandomLobby = `-- name: GetGameRandomLobby :one
SELECT id, user_id, class, op_id, status, created_at FROM game_random_lobby WHERE user_id=? AND op_id=?
`

type GetGameRandomLobbyParams struct {
	UserID int32 `json:"user_id"`
	OpID   int32 `json:"op_id"`
}

func (q *Queries) GetGameRandomLobby(ctx context.Context, arg GetGameRandomLobbyParams) (GameRandomLobby, error) {
	row := q.queryRow(ctx, q.getGameRandomLobbyStmt, getGameRandomLobby, arg.UserID, arg.OpID)
	var i GameRandomLobby
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Class,
		&i.OpID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getGameRandomLobbyById = `-- name: GetGameRandomLobbyById :one
SELECT id, user_id, class, op_id, status, created_at FROM game_random_lobby WHERE id=?
`

func (q *Queries) GetGameRandomLobbyById(ctx context.Context, id int32) (GameRandomLobby, error) {
	row := q.queryRow(ctx, q.getGameRandomLobbyByIdStmt, getGameRandomLobbyById, id)
	var i GameRandomLobby
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Class,
		&i.OpID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateGameRandomLobby = `-- name: UpdateGameRandomLobby :exec
UPDATE game_random_lobby SET status=? WHERE id=?
`

type UpdateGameRandomLobbyParams struct {
	Status string `json:"status"`
	ID     int32  `json:"id"`
}

func (q *Queries) UpdateGameRandomLobby(ctx context.Context, arg UpdateGameRandomLobbyParams) error {
	_, err := q.exec(ctx, q.updateGameRandomLobbyStmt, updateGameRandomLobby, arg.Status, arg.ID)
	return err
}
