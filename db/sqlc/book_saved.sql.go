// Code generated by sqlc. DO NOT EDIT.
// source: book_saved.sql

package db

import (
	"context"
	"time"
)

const createSaveBook = `-- name: CreateSaveBook :exec
INSERT INTO book_saved(
    book_id, user_id,created_at
) VALUES (
    ?,?,?
)
`

type CreateSaveBookParams struct {
	BookID    int32     `json:"book_id"`
	UserID    int32     `json:"user_id"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateSaveBook(ctx context.Context, arg CreateSaveBookParams) error {
	_, err := q.exec(ctx, q.createSaveBookStmt, createSaveBook, arg.BookID, arg.UserID, arg.CreatedAt)
	return err
}

const fetchSavedBook = `-- name: FetchSavedBook :one
SELECT id, book_id, user_id, created_at FROM book_saved WHERE user_id=? AND book_id=?
`

type FetchSavedBookParams struct {
	UserID int32 `json:"user_id"`
	BookID int32 `json:"book_id"`
}

func (q *Queries) FetchSavedBook(ctx context.Context, arg FetchSavedBookParams) (BookSaved, error) {
	row := q.queryRow(ctx, q.fetchSavedBookStmt, fetchSavedBook, arg.UserID, arg.BookID)
	var i BookSaved
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const fetchSavedBookList = `-- name: FetchSavedBookList :many
SELECT id, book_id, user_id, created_at FROM book_saved WHERE user_id=? and id>=? Limit 15
`

type FetchSavedBookListParams struct {
	UserID int32 `json:"user_id"`
	ID     int32 `json:"id"`
}

func (q *Queries) FetchSavedBookList(ctx context.Context, arg FetchSavedBookListParams) ([]BookSaved, error) {
	rows, err := q.query(ctx, q.fetchSavedBookListStmt, fetchSavedBookList, arg.UserID, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookSaved
	for rows.Next() {
		var i BookSaved
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removedSavedBook = `-- name: RemovedSavedBook :exec
DELETE FROM book_saved WHERE id=?
`

func (q *Queries) RemovedSavedBook(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.removedSavedBookStmt, removedSavedBook, id)
	return err
}
