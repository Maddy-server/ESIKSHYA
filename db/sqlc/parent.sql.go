// Code generated by sqlc. DO NOT EDIT.
// source: parent.sql

package db

import (
	"context"
	"database/sql"
)

const createParent = `-- name: CreateParent :exec
INSERT INTO parents (
     phone
) VALUES (
    ?
)
`

func (q *Queries) CreateParent(ctx context.Context, phone string) error {
	_, err := q.exec(ctx, q.createParentStmt, createParent, phone)
	return err
}

const getParent = `-- name: GetParent :one
SELECT id, phone, otp, isVerified,created_at FROM parents WHERE phone=?
`

type GetParentRow struct {
	ID         int32          `json:"id"`
	Phone      string         `json:"phone"`
	Otp        sql.NullString `json:"otp"`
	Isverified sql.NullBool   `json:"isverified"`
	CreatedAt  sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetParent(ctx context.Context, phone string) (GetParentRow, error) {
	row := q.queryRow(ctx, q.getParentStmt, getParent, phone)
	var i GetParentRow
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Otp,
		&i.Isverified,
		&i.CreatedAt,
	)
	return i, err
}

const getParentByRandomKey = `-- name: GetParentByRandomKey :one
SELECT parents.phone,parents.id,parents.isVerified,
    parents_detail.full_name FROM  parents_detail LEFT JOIN parents ON parents_detail.parent_id= parents.id 
    WHERE parents_detail.random_key =?
`

type GetParentByRandomKeyRow struct {
	Phone      sql.NullString `json:"phone"`
	ID         sql.NullInt32  `json:"id"`
	Isverified sql.NullBool   `json:"isverified"`
	FullName   string         `json:"full_name"`
}

func (q *Queries) GetParentByRandomKey(ctx context.Context, randomKey string) (GetParentByRandomKeyRow, error) {
	row := q.queryRow(ctx, q.getParentByRandomKeyStmt, getParentByRandomKey, randomKey)
	var i GetParentByRandomKeyRow
	err := row.Scan(
		&i.Phone,
		&i.ID,
		&i.Isverified,
		&i.FullName,
	)
	return i, err
}

const getParentForLogin = `-- name: GetParentForLogin :one
SELECT parents.phone, parents.password,parents.id,parents.created_at,
    parents_detail.full_name, parents_detail.address FROM parents LEFT JOIN parents_detail ON parents.id = parents_detail.parent_id
    WHERE parents.phone =?
`

type GetParentForLoginRow struct {
	Phone     string         `json:"phone"`
	Password  sql.NullString `json:"password"`
	ID        int32          `json:"id"`
	CreatedAt sql.NullTime   `json:"created_at"`
	FullName  sql.NullString `json:"full_name"`
	Address   sql.NullString `json:"address"`
}

func (q *Queries) GetParentForLogin(ctx context.Context, phone string) (GetParentForLoginRow, error) {
	row := q.queryRow(ctx, q.getParentForLoginStmt, getParentForLogin, phone)
	var i GetParentForLoginRow
	err := row.Scan(
		&i.Phone,
		&i.Password,
		&i.ID,
		&i.CreatedAt,
		&i.FullName,
		&i.Address,
	)
	return i, err
}

const getParentInfo = `-- name: GetParentInfo :one
SELECT id, phone, password, otp, isverified, created_at, deleted_at FROM parents WHERE phone=?
`

func (q *Queries) GetParentInfo(ctx context.Context, phone string) (Parent, error) {
	row := q.queryRow(ctx, q.getParentInfoStmt, getParentInfo, phone)
	var i Parent
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Password,
		&i.Otp,
		&i.Isverified,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const removeOTP = `-- name: RemoveOTP :exec
UPDATE parents SET otp="" WHERE phone=?
`

func (q *Queries) RemoveOTP(ctx context.Context, phone string) error {
	_, err := q.exec(ctx, q.removeOTPStmt, removeOTP, phone)
	return err
}

const saveOTP = `-- name: SaveOTP :exec
UPDATE parents SET otp=?,isVerified=0  where phone = ?
`

type SaveOTPParams struct {
	Otp   sql.NullString `json:"otp"`
	Phone string         `json:"phone"`
}

func (q *Queries) SaveOTP(ctx context.Context, arg SaveOTPParams) error {
	_, err := q.exec(ctx, q.saveOTPStmt, saveOTP, arg.Otp, arg.Phone)
	return err
}

const savepassword = `-- name: Savepassword :exec
UPDATE parents SET password=? WHERE phone=?
`

type SavepasswordParams struct {
	Password sql.NullString `json:"password"`
	Phone    string         `json:"phone"`
}

func (q *Queries) Savepassword(ctx context.Context, arg SavepasswordParams) error {
	_, err := q.exec(ctx, q.savepasswordStmt, savepassword, arg.Password, arg.Phone)
	return err
}

const setVerification = `-- name: SetVerification :exec
UPDATE parents SET isVerified=1 WHERE phone=?
`

func (q *Queries) SetVerification(ctx context.Context, phone string) error {
	_, err := q.exec(ctx, q.setVerificationStmt, setVerification, phone)
	return err
}
