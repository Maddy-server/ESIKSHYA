// Code generated by sqlc. DO NOT EDIT.
// source: score.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createScorePoint = `-- name: CreateScorePoint :exec
INSERT INTO score(
   user_id,own_points,op_id,op_points,created_at,subject
) VALUES (
    ?,?,?,?,?,?
)
`

type CreateScorePointParams struct {
	UserID    int32     `json:"user_id"`
	OwnPoints int32     `json:"own_points"`
	OpID      int32     `json:"op_id"`
	OpPoints  int32     `json:"op_points"`
	CreatedAt time.Time `json:"created_at"`
	Subject   string    `json:"subject"`
}

func (store *SQLStore) CreateScorePoint(ctx context.Context, arg CreateScorePointParams) error {
	_, err := store.db.Exec( createScorePoint,
		arg.UserID,
		arg.OwnPoints,
		arg.OpID,
		arg.OpPoints,
		arg.CreatedAt,
		arg.Subject,
	)
	return err
}

const scoreDetailsList = `-- name: ScoreDetailsList :many
SELECT id, user_id, own_points, op_id, op_points, subject, created_at FROM score WHERE user_id=? ORDER BY created_at DESC
`

func (store *SQLStore) ScoreDetailsList(ctx context.Context, userID int32) ([]Score, error) {
	rows, err := store.db.Query(  scoreDetailsList, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Score
	for rows.Next() {
		var i Score
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OwnPoints,
			&i.OpID,
			&i.OpPoints,
			&i.Subject,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const scoreDetailsListByCountry = `-- name: ScoreDetailsListByCountry :many
SELECT score.user_id,children_detail.full_name,children_detail.country,
children_detail.grade,  MAX(score.own_points) FROM score  LEFT JOIN  children_detail
ON children_detail.children_id = score.user_id WHERE children_detail.country=? GROUP BY score.user_id ORDER BY 5 DESC
`

type ScoreDetailsListByCountryRow struct {
	UserID   int32          `json:"user_id"`
	FullName sql.NullString `json:"full_name"`
	Country  sql.NullString `json:"country"`
	Grade    sql.NullInt32  `json:"grade"`
	Max      int32   `json:"max"`
}

func (store *SQLStore) ScoreDetailsListByCountry(ctx context.Context, country sql.NullString) ([]ScoreDetailsListByCountryRow, error) {
	rows, err := store.db.Query( scoreDetailsListByCountry, country)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScoreDetailsListByCountryRow
	for rows.Next() {
		var i ScoreDetailsListByCountryRow
		if err := rows.Scan(
			&i.UserID,
			&i.FullName,
			&i.Country,
			&i.Grade,
			&i.Max,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const scoreDetailsListByState = `-- name: ScoreDetailsListByState :many
SELECT score.user_id,children_detail.full_name,children_detail.state,
children_detail.grade, MAX(score.own_points) FROM score  LEFT JOIN  children_detail
ON children_detail.children_id = score.user_id WHERE children_detail.state=? GROUP BY score.user_id ORDER BY 5 DESC
`

type ScoreDetailsListByStateRow struct {
	UserID   int32          `json:"user_id"`
	FullName sql.NullString `json:"full_name"`
	State    sql.NullString `json:"state"`
	Grade    sql.NullInt32  `json:"grade"`
	Max      int32   `json:"max"`
}

func (store *SQLStore) ScoreDetailsListByState(ctx context.Context, state sql.NullString) ([]ScoreDetailsListByStateRow, error) {
	rows, err := store.db.Query(scoreDetailsListByState, state)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScoreDetailsListByStateRow
	for rows.Next() {
		var i ScoreDetailsListByStateRow
		if err := rows.Scan(
			&i.UserID,
			&i.FullName,
			&i.State,
			&i.Grade,
			&i.Max,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const scoreDetailsSats = `-- name: ScoreDetailsSats :many
SELECT id, user_id, own_points, op_id, op_points, subject, created_at FROM  score WHERE user_id=? AND created_at >= ?  ORDER BY own_points DESC
`

type ScoreDetailsSatsParams struct {
	UserID    int32     `json:"user_id"`
	CreatedAt time.Time `json:"created_at"`
}

func (store *SQLStore) ScoreDetailsSats(ctx context.Context, arg ScoreDetailsSatsParams) ([]Score, error) {
	rows, err := store.db.Query(scoreDetailsSats, arg.UserID, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Score
	for rows.Next() {
		var i Score
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OwnPoints,
			&i.OpID,
			&i.OpPoints,
			&i.Subject,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
