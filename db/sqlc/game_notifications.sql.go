// Code generated by sqlc. DO NOT EDIT.
// source: game_notifications.sql

package db

import (
	"context"
	"time"
)

const createGameNotification = `-- name: CreateGameNotification :exec
INSERT INTO game_notifications(
   user_id, title, type,oponent_id, description,created_at,subject,status,grade
) VALUES (
    ?,?,?,?,?,?,?,?,?
)
`

type CreateGameNotificationParams struct {
	UserID      int32     `json:"user_id"`
	Title       string    `json:"title"`
	Type        string    `json:"type"`
	OponentID   int32     `json:"oponent_id"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"created_at"`
	Subject     string    `json:"subject"`
	Status      string    `json:"status"`
	Grade       int32     `json:"grade"`
}

func (q *Queries) CreateGameNotification(ctx context.Context, arg CreateGameNotificationParams) error {
	_, err := q.exec(ctx, q.createGameNotificationStmt, createGameNotification,
		arg.UserID,
		arg.Title,
		arg.Type,
		arg.OponentID,
		arg.Description,
		arg.CreatedAt,
		arg.Subject,
		arg.Status,
		arg.Grade,
	)
	return err
}

const deleteGameNotification = `-- name: DeleteGameNotification :exec
DELETE FROM game_notifications WHERE id=? AND user_id=?
`

type DeleteGameNotificationParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteGameNotification(ctx context.Context, arg DeleteGameNotificationParams) error {
	_, err := q.exec(ctx, q.deleteGameNotificationStmt, deleteGameNotification, arg.ID, arg.UserID)
	return err
}

const getGameNotification = `-- name: GetGameNotification :many
SELECT id, user_id, oponent_id, title, type, description, subject, status, grade, created_at FROM game_notifications WHERE user_id=? ORDER BY created_at Desc
`

func (q *Queries) GetGameNotification(ctx context.Context, userID int32) ([]GameNotification, error) {
	rows, err := q.query(ctx, q.getGameNotificationStmt, getGameNotification, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameNotification
	for rows.Next() {
		var i GameNotification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OponentID,
			&i.Title,
			&i.Type,
			&i.Description,
			&i.Subject,
			&i.Status,
			&i.Grade,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
