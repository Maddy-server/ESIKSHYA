// Code generated by sqlc. DO NOT EDIT.
// source: parent_notification.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createParentsNotification = `-- name: CreateParentsNotification :exec
INSERT INTO parents_notifications(
   user_id, title, type, description,created_at,secondary_user_id
) VALUES (
    ?,?,?,?,?,?
)
`

type CreateParentsNotificationParams struct {
	UserID          int32         `json:"user_id"`
	Title           string        `json:"title"`
	Type            string        `json:"type"`
	Description     string        `json:"description"`
	CreatedAt       time.Time     `json:"created_at"`
	SecondaryUserID sql.NullInt32 `json:"secondary_user_id"`
}

func (q *Queries) CreateParentsNotification(ctx context.Context, arg CreateParentsNotificationParams) error {
	_, err := q.exec(ctx, q.createParentsNotificationStmt, createParentsNotification,
		arg.UserID,
		arg.Title,
		arg.Type,
		arg.Description,
		arg.CreatedAt,
		arg.SecondaryUserID,
	)
	return err
}

const getParentsNotification = `-- name: GetParentsNotification :many
SELECT id, user_id, secondary_user_id, title, type, description, created_at FROM parents_notifications WHERE user_id=? ORDER BY created_at Desc
`

func (q *Queries) GetParentsNotification(ctx context.Context, userID int32) ([]ParentsNotification, error) {
	rows, err := q.query(ctx, q.getParentsNotificationStmt, getParentsNotification, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ParentsNotification
	for rows.Next() {
		var i ParentsNotification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SecondaryUserID,
			&i.Title,
			&i.Type,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
